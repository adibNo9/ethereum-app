{"ast":null,"code":"import { InvalidAddressError } from '../../errors/address.js';\nimport { BaseError } from '../../errors/base.js';\nimport { InvalidChainIdError } from '../../errors/chain.js';\nimport { FeeCapTooHighError, TipAboveFeeCapError } from '../../errors/node.js';\nimport { isAddress } from '../../utils/address/isAddress.js';\nimport { concatHex } from '../../utils/data/concat.js';\nimport { trim } from '../../utils/data/trim.js';\nimport { toHex } from '../../utils/encoding/toHex.js';\nimport { toRlp } from '../../utils/encoding/toRlp.js';\nimport { serializeAccessList } from '../../utils/transaction/serializeAccessList.js';\nimport { serializeTransaction } from '../../utils/transaction/serializeTransaction.js';\nimport { isCIP42, isCIP64, isEmpty, isPresent } from './utils.js';\nexport const serializeTransactionCelo = (tx, signature) => {\n  if (isCIP64(tx)) return serializeTransactionCIP64(tx, signature);\n  if (isCIP42(tx)) return serializeTransactionCIP42(tx, signature);\n  return serializeTransaction(tx, signature);\n};\nexport const serializersCelo = {\n  transaction: serializeTransactionCelo\n};\n// There shall be a typed transaction with the code 0x7c that has the following format:\n// 0x7c || rlp([chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, feecurrency, gatewayFeeRecipient, gatewayfee, destination, amount, data, access_list, signature_y_parity, signature_r, signature_s]).\n// This will be in addition to the type 0x02 transaction as specified in EIP-1559.\nfunction serializeTransactionCIP42(transaction, signature) {\n  assertTransactionCIP42(transaction);\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    feeCurrency,\n    gatewayFeeRecipient,\n    gatewayFee,\n    data\n  } = transaction;\n  const serializedTransaction = [toHex(chainId), nonce ? toHex(nonce) : '0x', maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x', maxFeePerGas ? toHex(maxFeePerGas) : '0x', gas ? toHex(gas) : '0x', feeCurrency ?? '0x', gatewayFeeRecipient ?? '0x', gatewayFee ? toHex(gatewayFee) : '0x', to ?? '0x', value ? toHex(value) : '0x', data ?? '0x', serializeAccessList(accessList)];\n  if (signature) {\n    serializedTransaction.push(signature.v === 27n ? '0x' : toHex(1),\n    // yParity\n    trim(signature.r), trim(signature.s));\n  }\n  return concatHex(['0x7c', toRlp(serializedTransaction)]);\n}\nfunction serializeTransactionCIP64(transaction, signature) {\n  assertTransactionCIP64(transaction);\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    feeCurrency,\n    data\n  } = transaction;\n  const serializedTransaction = [toHex(chainId), nonce ? toHex(nonce) : '0x', maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x', maxFeePerGas ? toHex(maxFeePerGas) : '0x', gas ? toHex(gas) : '0x', to ?? '0x', value ? toHex(value) : '0x', data ?? '0x', serializeAccessList(accessList), feeCurrency];\n  if (signature) {\n    serializedTransaction.push(signature.v === 27n ? '0x' : toHex(1),\n    // yParity\n    trim(signature.r), trim(signature.s));\n  }\n  return concatHex(['0x7b', toRlp(serializedTransaction)]);\n}\n// maxFeePerGas must be less than 2^256 - 1\nconst MAX_MAX_FEE_PER_GAS = 2n ** 256n - 1n;\nexport function assertTransactionCIP42(transaction) {\n  const {\n    chainId,\n    maxPriorityFeePerGas,\n    gasPrice,\n    maxFeePerGas,\n    to,\n    feeCurrency,\n    gatewayFee,\n    gatewayFeeRecipient\n  } = transaction;\n  if (chainId <= 0) throw new InvalidChainIdError({\n    chainId\n  });\n  if (to && !isAddress(to)) throw new InvalidAddressError({\n    address: to\n  });\n  if (gasPrice) throw new BaseError('`gasPrice` is not a valid CIP-42 Transaction attribute.');\n  if (isPresent(maxFeePerGas) && maxFeePerGas > MAX_MAX_FEE_PER_GAS) throw new FeeCapTooHighError({\n    maxFeePerGas\n  });\n  if (isPresent(maxPriorityFeePerGas) && isPresent(maxFeePerGas) && maxPriorityFeePerGas > maxFeePerGas) throw new TipAboveFeeCapError({\n    maxFeePerGas,\n    maxPriorityFeePerGas\n  });\n  if (isPresent(gatewayFee) && isEmpty(gatewayFeeRecipient) || isPresent(gatewayFeeRecipient) && isEmpty(gatewayFee)) {\n    throw new BaseError('`gatewayFee` and `gatewayFeeRecipient` must be provided together.');\n  }\n  if (isPresent(feeCurrency) && !isAddress(feeCurrency)) {\n    throw new BaseError('`feeCurrency` MUST be a token address for CIP-42 transactions.');\n  }\n  if (isPresent(gatewayFeeRecipient) && !isAddress(gatewayFeeRecipient)) {\n    throw new InvalidAddressError(gatewayFeeRecipient);\n  }\n  if (isEmpty(feeCurrency) && isEmpty(gatewayFeeRecipient)) {\n    throw new BaseError('Either `feeCurrency` or `gatewayFeeRecipient` must be provided for CIP-42 transactions.');\n  }\n}\nexport function assertTransactionCIP64(transaction) {\n  const {\n    chainId,\n    maxPriorityFeePerGas,\n    gasPrice,\n    maxFeePerGas,\n    to,\n    feeCurrency\n  } = transaction;\n  if (chainId <= 0) throw new InvalidChainIdError({\n    chainId\n  });\n  if (to && !isAddress(to)) throw new InvalidAddressError({\n    address: to\n  });\n  if (gasPrice) throw new BaseError('`gasPrice` is not a valid CIP-64 Transaction attribute.');\n  if (isPresent(maxFeePerGas) && maxFeePerGas > MAX_MAX_FEE_PER_GAS) throw new FeeCapTooHighError({\n    maxFeePerGas\n  });\n  if (isPresent(maxPriorityFeePerGas) && isPresent(maxFeePerGas) && maxPriorityFeePerGas > maxFeePerGas) throw new TipAboveFeeCapError({\n    maxFeePerGas,\n    maxPriorityFeePerGas\n  });\n  if (isPresent(feeCurrency) && !isAddress(feeCurrency)) {\n    throw new BaseError('`feeCurrency` MUST be a token address for CIP-64 transactions.');\n  }\n  if (isEmpty(feeCurrency)) {\n    throw new BaseError('`feeCurrency` must be provided for CIP-64 transactions.');\n  }\n}","map":{"version":3,"names":["InvalidAddressError","BaseError","InvalidChainIdError","FeeCapTooHighError","TipAboveFeeCapError","isAddress","concatHex","trim","toHex","toRlp","serializeAccessList","serializeTransaction","isCIP42","isCIP64","isEmpty","isPresent","serializeTransactionCelo","tx","signature","serializeTransactionCIP64","serializeTransactionCIP42","serializersCelo","transaction","assertTransactionCIP42","chainId","gas","nonce","to","value","maxFeePerGas","maxPriorityFeePerGas","accessList","feeCurrency","gatewayFeeRecipient","gatewayFee","data","serializedTransaction","push","v","r","s","assertTransactionCIP64","MAX_MAX_FEE_PER_GAS","gasPrice","address"],"sources":["/home/adib-alpha/projects/ethereum-app/node_modules/viem/chains/celo/serializers.ts"],"sourcesContent":["import { InvalidAddressError } from '../../errors/address.js'\nimport { BaseError } from '../../errors/base.js'\nimport { InvalidChainIdError } from '../../errors/chain.js'\nimport { FeeCapTooHighError, TipAboveFeeCapError } from '../../errors/node.js'\nimport type { ChainSerializers } from '../../types/chain.js'\nimport type { Signature } from '../../types/misc.js'\nimport type { TransactionSerializable } from '../../types/transaction.js'\nimport { isAddress } from '../../utils/address/isAddress.js'\nimport { concatHex } from '../../utils/data/concat.js'\nimport { trim } from '../../utils/data/trim.js'\nimport { toHex } from '../../utils/encoding/toHex.js'\nimport { toRlp } from '../../utils/encoding/toRlp.js'\nimport { serializeAccessList } from '../../utils/transaction/serializeAccessList.js'\nimport {\n  type SerializeTransactionFn,\n  serializeTransaction,\n} from '../../utils/transaction/serializeTransaction.js'\nimport type {\n  CeloTransactionSerializable,\n  TransactionSerializableCIP42,\n  TransactionSerializableCIP64,\n  TransactionSerializedCIP42,\n  TransactionSerializedCIP64,\n} from './types.js'\nimport { isCIP42, isCIP64, isEmpty, isPresent } from './utils.js'\n\nexport const serializeTransactionCelo: SerializeTransactionFn<\n  CeloTransactionSerializable | TransactionSerializable\n> = (tx, signature) => {\n  if (isCIP64(tx)) return serializeTransactionCIP64(tx, signature)\n  if (isCIP42(tx)) return serializeTransactionCIP42(tx, signature)\n  return serializeTransaction(tx as TransactionSerializable, signature)\n}\n\nexport const serializersCelo = {\n  transaction: serializeTransactionCelo,\n} as const satisfies ChainSerializers\n\n//////////////////////////////////////////////////////////////////////////////\n// Serializers\n\nexport type SerializeTransactionCIP42ReturnType = TransactionSerializedCIP42\nexport type SerializeTransactionCIP64ReturnType = TransactionSerializedCIP64\n\n// There shall be a typed transaction with the code 0x7c that has the following format:\n// 0x7c || rlp([chain_id, nonce, max_priority_fee_per_gas, max_fee_per_gas, gas_limit, feecurrency, gatewayFeeRecipient, gatewayfee, destination, amount, data, access_list, signature_y_parity, signature_r, signature_s]).\n// This will be in addition to the type 0x02 transaction as specified in EIP-1559.\nfunction serializeTransactionCIP42(\n  transaction: TransactionSerializableCIP42,\n  signature?: Signature,\n): SerializeTransactionCIP42ReturnType {\n  assertTransactionCIP42(transaction)\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    feeCurrency,\n    gatewayFeeRecipient,\n    gatewayFee,\n    data,\n  } = transaction\n\n  const serializedTransaction = [\n    toHex(chainId),\n    nonce ? toHex(nonce) : '0x',\n    maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x',\n    maxFeePerGas ? toHex(maxFeePerGas) : '0x',\n    gas ? toHex(gas) : '0x',\n    feeCurrency ?? '0x',\n    gatewayFeeRecipient ?? '0x',\n    gatewayFee ? toHex(gatewayFee) : '0x',\n    to ?? '0x',\n    value ? toHex(value) : '0x',\n    data ?? '0x',\n    serializeAccessList(accessList),\n  ]\n\n  if (signature) {\n    serializedTransaction.push(\n      signature.v === 27n ? '0x' : toHex(1), // yParity\n      trim(signature.r),\n      trim(signature.s),\n    )\n  }\n\n  return concatHex([\n    '0x7c',\n    toRlp(serializedTransaction),\n  ]) as SerializeTransactionCIP42ReturnType\n}\n\nfunction serializeTransactionCIP64(\n  transaction: TransactionSerializableCIP64,\n  signature?: Signature,\n): SerializeTransactionCIP64ReturnType {\n  assertTransactionCIP64(transaction)\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    accessList,\n    feeCurrency,\n    data,\n  } = transaction\n\n  const serializedTransaction = [\n    toHex(chainId),\n    nonce ? toHex(nonce) : '0x',\n    maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x',\n    maxFeePerGas ? toHex(maxFeePerGas) : '0x',\n    gas ? toHex(gas) : '0x',\n    to ?? '0x',\n    value ? toHex(value) : '0x',\n    data ?? '0x',\n    serializeAccessList(accessList),\n    feeCurrency!,\n  ]\n\n  if (signature) {\n    serializedTransaction.push(\n      signature.v === 27n ? '0x' : toHex(1), // yParity\n      trim(signature.r),\n      trim(signature.s),\n    )\n  }\n\n  return concatHex([\n    '0x7b',\n    toRlp(serializedTransaction),\n  ]) as SerializeTransactionCIP64ReturnType\n}\n\n// maxFeePerGas must be less than 2^256 - 1\nconst MAX_MAX_FEE_PER_GAS = 2n ** 256n - 1n\n\nexport function assertTransactionCIP42(\n  transaction: TransactionSerializableCIP42,\n) {\n  const {\n    chainId,\n    maxPriorityFeePerGas,\n    gasPrice,\n    maxFeePerGas,\n    to,\n    feeCurrency,\n    gatewayFee,\n    gatewayFeeRecipient,\n  } = transaction\n  if (chainId <= 0) throw new InvalidChainIdError({ chainId })\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n  if (gasPrice)\n    throw new BaseError(\n      '`gasPrice` is not a valid CIP-42 Transaction attribute.',\n    )\n\n  if (isPresent(maxFeePerGas) && maxFeePerGas > MAX_MAX_FEE_PER_GAS)\n    throw new FeeCapTooHighError({ maxFeePerGas })\n\n  if (\n    isPresent(maxPriorityFeePerGas) &&\n    isPresent(maxFeePerGas) &&\n    maxPriorityFeePerGas > maxFeePerGas\n  )\n    throw new TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas })\n\n  if (\n    (isPresent(gatewayFee) && isEmpty(gatewayFeeRecipient)) ||\n    (isPresent(gatewayFeeRecipient) && isEmpty(gatewayFee))\n  ) {\n    throw new BaseError(\n      '`gatewayFee` and `gatewayFeeRecipient` must be provided together.',\n    )\n  }\n\n  if (isPresent(feeCurrency) && !isAddress(feeCurrency)) {\n    throw new BaseError(\n      '`feeCurrency` MUST be a token address for CIP-42 transactions.',\n    )\n  }\n\n  if (isPresent(gatewayFeeRecipient) && !isAddress(gatewayFeeRecipient)) {\n    throw new InvalidAddressError(gatewayFeeRecipient)\n  }\n\n  if (isEmpty(feeCurrency) && isEmpty(gatewayFeeRecipient)) {\n    throw new BaseError(\n      'Either `feeCurrency` or `gatewayFeeRecipient` must be provided for CIP-42 transactions.',\n    )\n  }\n}\n\nexport function assertTransactionCIP64(\n  transaction: TransactionSerializableCIP64,\n) {\n  const {\n    chainId,\n    maxPriorityFeePerGas,\n    gasPrice,\n    maxFeePerGas,\n    to,\n    feeCurrency,\n  } = transaction\n\n  if (chainId <= 0) throw new InvalidChainIdError({ chainId })\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n\n  if (gasPrice)\n    throw new BaseError(\n      '`gasPrice` is not a valid CIP-64 Transaction attribute.',\n    )\n\n  if (isPresent(maxFeePerGas) && maxFeePerGas > MAX_MAX_FEE_PER_GAS)\n    throw new FeeCapTooHighError({ maxFeePerGas })\n  if (\n    isPresent(maxPriorityFeePerGas) &&\n    isPresent(maxFeePerGas) &&\n    maxPriorityFeePerGas > maxFeePerGas\n  )\n    throw new TipAboveFeeCapError({ maxFeePerGas, maxPriorityFeePerGas })\n\n  if (isPresent(feeCurrency) && !isAddress(feeCurrency)) {\n    throw new BaseError(\n      '`feeCurrency` MUST be a token address for CIP-64 transactions.',\n    )\n  }\n\n  if (isEmpty(feeCurrency)) {\n    throw new BaseError(\n      '`feeCurrency` must be provided for CIP-64 transactions.',\n    )\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}