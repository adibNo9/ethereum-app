{"ast":null,"code":"import { InvalidAddressError } from '../../errors/address.js';\nimport { BaseError } from '../../errors/base.js';\nimport { InvalidChainIdError } from '../../errors/chain.js';\nimport { isAddress } from '../../utils/address/isAddress.js';\nimport { concatHex } from '../../utils/data/concat.js';\nimport { toHex } from '../../utils/encoding/toHex.js';\nimport { toRlp } from '../../utils/encoding/toRlp.js';\nimport { serializeTransaction } from '../../utils/transaction/serializeTransaction.js';\nexport const serializeTransactionZkSync = (tx, signature) => {\n  if (isEIP712(tx)) return serializeTransactionZkSyncEIP712(tx);\n  return serializeTransaction(tx, signature);\n};\nexport const serializersZkSync = {\n  transaction: serializeTransactionZkSync\n};\nfunction serializeTransactionZkSyncEIP712(transaction) {\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    from,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    customSignature,\n    factoryDeps,\n    paymaster,\n    paymasterInput,\n    gasPerPubdata,\n    data\n  } = transaction;\n  assertTransactionEIP712(transaction);\n  const serializedTransaction = [nonce ? toHex(nonce) : '0x', maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x', maxFeePerGas ? toHex(maxFeePerGas) : '0x', gas ? toHex(gas) : '0x', to ?? '0x', value ? toHex(value) : '0x', data ?? '0x', toHex(chainId), toHex(''), toHex(''), toHex(chainId), from ?? '0x', gasPerPubdata ? toHex(gasPerPubdata) : '0x', factoryDeps ?? [], customSignature ?? '0x', paymaster && paymasterInput ? [paymaster, paymasterInput] : []];\n  return concatHex(['0x71', toRlp(serializedTransaction)]);\n}\n//////////////////////////////////////////////////////////////////////////////\n// Utilities\nfunction isEIP712(transaction) {\n  if ('customSignature' in transaction || 'paymaster' in transaction || 'paymasterInput' in transaction || 'gasPerPubdata' in transaction || 'factoryDeps' in transaction) return true;\n  return false;\n}\nexport function assertTransactionEIP712(transaction) {\n  const {\n    chainId,\n    to,\n    from,\n    paymaster,\n    paymasterInput\n  } = transaction;\n  if (chainId <= 0) throw new InvalidChainIdError({\n    chainId\n  });\n  if (to && !isAddress(to)) throw new InvalidAddressError({\n    address: to\n  });\n  if (from && !isAddress(from)) throw new InvalidAddressError({\n    address: from\n  });\n  if (paymaster && !isAddress(paymaster)) throw new InvalidAddressError({\n    address: paymaster\n  });\n  if (paymaster && !paymasterInput) {\n    throw new BaseError('`paymasterInput` must be provided when `paymaster` is defined');\n  }\n  if (!paymaster && paymasterInput) {\n    throw new BaseError('`paymaster` must be provided when `paymasterInput` is defined');\n  }\n}","map":{"version":3,"names":["InvalidAddressError","BaseError","InvalidChainIdError","isAddress","concatHex","toHex","toRlp","serializeTransaction","serializeTransactionZkSync","tx","signature","isEIP712","serializeTransactionZkSyncEIP712","serializersZkSync","transaction","chainId","gas","nonce","to","from","value","maxFeePerGas","maxPriorityFeePerGas","customSignature","factoryDeps","paymaster","paymasterInput","gasPerPubdata","data","assertTransactionEIP712","serializedTransaction","address"],"sources":["/home/adib-alpha/projects/ethereum-app/node_modules/viem/chains/zksync/serializers.ts"],"sourcesContent":["import { InvalidAddressError } from '../../errors/address.js'\nimport { BaseError } from '../../errors/base.js'\nimport { InvalidChainIdError } from '../../errors/chain.js'\nimport type { ChainSerializers } from '../../types/chain.js'\nimport type { TransactionSerializable } from '../../types/transaction.js'\nimport { isAddress } from '../../utils/address/isAddress.js'\nimport { concatHex } from '../../utils/data/concat.js'\nimport { toHex } from '../../utils/encoding/toHex.js'\nimport { toRlp } from '../../utils/encoding/toRlp.js'\nimport {\n  type SerializeTransactionFn,\n  serializeTransaction,\n} from '../../utils/transaction/serializeTransaction.js'\nimport type {\n  ZkSyncTransactionSerializable,\n  ZkSyncTransactionSerializableEIP712,\n  ZkSyncTransactionSerializedEIP712,\n} from './types.js'\n\nexport const serializeTransactionZkSync: SerializeTransactionFn<\n  ZkSyncTransactionSerializable\n> = (tx, signature) => {\n  if (isEIP712(tx))\n    return serializeTransactionZkSyncEIP712(\n      tx as ZkSyncTransactionSerializableEIP712,\n    )\n  return serializeTransaction(tx as TransactionSerializable, signature)\n}\n\nexport const serializersZkSync = {\n  transaction: serializeTransactionZkSync,\n} as const satisfies ChainSerializers\n\n//////////////////////////////////////////////////////////////////////////////\n// Serializers\n\nexport type SerializeTransactionEIP712ReturnType =\n  ZkSyncTransactionSerializedEIP712\n\nfunction serializeTransactionZkSyncEIP712(\n  transaction: ZkSyncTransactionSerializableEIP712,\n): SerializeTransactionEIP712ReturnType {\n  const {\n    chainId,\n    gas,\n    nonce,\n    to,\n    from,\n    value,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    customSignature,\n    factoryDeps,\n    paymaster,\n    paymasterInput,\n    gasPerPubdata,\n    data,\n  } = transaction\n\n  assertTransactionEIP712(transaction)\n\n  const serializedTransaction = [\n    nonce ? toHex(nonce) : '0x',\n    maxPriorityFeePerGas ? toHex(maxPriorityFeePerGas) : '0x',\n    maxFeePerGas ? toHex(maxFeePerGas) : '0x',\n    gas ? toHex(gas) : '0x',\n    to ?? '0x',\n    value ? toHex(value) : '0x',\n    data ?? '0x',\n    toHex(chainId),\n    toHex(''),\n    toHex(''),\n    toHex(chainId),\n    from ?? '0x',\n    gasPerPubdata ? toHex(gasPerPubdata) : '0x',\n    factoryDeps ?? [],\n    customSignature ?? '0x', // EIP712 signature\n    paymaster && paymasterInput ? [paymaster, paymasterInput] : [],\n  ]\n\n  return concatHex([\n    '0x71',\n    toRlp(serializedTransaction),\n  ]) as SerializeTransactionEIP712ReturnType\n}\n\n//////////////////////////////////////////////////////////////////////////////\n// Utilities\n\nfunction isEIP712(transaction: ZkSyncTransactionSerializable) {\n  if (\n    'customSignature' in transaction ||\n    'paymaster' in transaction ||\n    'paymasterInput' in transaction ||\n    'gasPerPubdata' in transaction ||\n    'factoryDeps' in transaction\n  )\n    return true\n  return false\n}\n\nexport function assertTransactionEIP712(\n  transaction: ZkSyncTransactionSerializableEIP712,\n) {\n  const { chainId, to, from, paymaster, paymasterInput } = transaction\n  if (chainId <= 0) throw new InvalidChainIdError({ chainId })\n\n  if (to && !isAddress(to)) throw new InvalidAddressError({ address: to })\n  if (from && !isAddress(from)) throw new InvalidAddressError({ address: from })\n  if (paymaster && !isAddress(paymaster))\n    throw new InvalidAddressError({ address: paymaster })\n\n  if (paymaster && !paymasterInput) {\n    throw new BaseError(\n      '`paymasterInput` must be provided when `paymaster` is defined',\n    )\n  }\n\n  if (!paymaster && paymasterInput) {\n    throw new BaseError(\n      '`paymaster` must be provided when `paymasterInput` is defined',\n    )\n  }\n}\n"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,yBAAyB;AAC7D,SAASC,SAAS,QAAQ,sBAAsB;AAChD,SAASC,mBAAmB,QAAQ,uBAAuB;AAG3D,SAASC,SAAS,QAAQ,kCAAkC;AAC5D,SAASC,SAAS,QAAQ,4BAA4B;AACtD,SAASC,KAAK,QAAQ,+BAA+B;AACrD,SAASC,KAAK,QAAQ,+BAA+B;AACrD,SAEEC,oBAAoB,QACf,iDAAiD;AAOxD,OAAO,MAAMC,0BAA0B,GAEnCA,CAACC,EAAE,EAAEC,SAAS,KAAI;EACpB,IAAIC,QAAQ,CAACF,EAAE,CAAC,EACd,OAAOG,gCAAgC,CACrCH,EAAyC,CAC1C;EACH,OAAOF,oBAAoB,CAACE,EAA6B,EAAEC,SAAS,CAAC;AACvE,CAAC;AAED,OAAO,MAAMG,iBAAiB,GAAG;EAC/BC,WAAW,EAAEN;CACsB;AAQrC,SAASI,gCAAgCA,CACvCE,WAAgD;EAEhD,MAAM;IACJC,OAAO;IACPC,GAAG;IACHC,KAAK;IACLC,EAAE;IACFC,IAAI;IACJC,KAAK;IACLC,YAAY;IACZC,oBAAoB;IACpBC,eAAe;IACfC,WAAW;IACXC,SAAS;IACTC,cAAc;IACdC,aAAa;IACbC;EAAI,CACL,GAAGd,WAAW;EAEfe,uBAAuB,CAACf,WAAW,CAAC;EAEpC,MAAMgB,qBAAqB,GAAG,CAC5Bb,KAAK,GAAGZ,KAAK,CAACY,KAAK,CAAC,GAAG,IAAI,EAC3BK,oBAAoB,GAAGjB,KAAK,CAACiB,oBAAoB,CAAC,GAAG,IAAI,EACzDD,YAAY,GAAGhB,KAAK,CAACgB,YAAY,CAAC,GAAG,IAAI,EACzCL,GAAG,GAAGX,KAAK,CAACW,GAAG,CAAC,GAAG,IAAI,EACvBE,EAAE,IAAI,IAAI,EACVE,KAAK,GAAGf,KAAK,CAACe,KAAK,CAAC,GAAG,IAAI,EAC3BQ,IAAI,IAAI,IAAI,EACZvB,KAAK,CAACU,OAAO,CAAC,EACdV,KAAK,CAAC,EAAE,CAAC,EACTA,KAAK,CAAC,EAAE,CAAC,EACTA,KAAK,CAACU,OAAO,CAAC,EACdI,IAAI,IAAI,IAAI,EACZQ,aAAa,GAAGtB,KAAK,CAACsB,aAAa,CAAC,GAAG,IAAI,EAC3CH,WAAW,IAAI,EAAE,EACjBD,eAAe,IAAI,IAAI,EACvBE,SAAS,IAAIC,cAAc,GAAG,CAACD,SAAS,EAAEC,cAAc,CAAC,GAAG,EAAE,CAC/D;EAED,OAAOtB,SAAS,CAAC,CACf,MAAM,EACNE,KAAK,CAACwB,qBAAqB,CAAC,CAC7B,CAAyC;AAC5C;AAEA;AACA;AAEA,SAASnB,QAAQA,CAACG,WAA0C;EAC1D,IACE,iBAAiB,IAAIA,WAAW,IAChC,WAAW,IAAIA,WAAW,IAC1B,gBAAgB,IAAIA,WAAW,IAC/B,eAAe,IAAIA,WAAW,IAC9B,aAAa,IAAIA,WAAW,EAE5B,OAAO,IAAI;EACb,OAAO,KAAK;AACd;AAEA,OAAM,SAAUe,uBAAuBA,CACrCf,WAAgD;EAEhD,MAAM;IAAEC,OAAO;IAAEG,EAAE;IAAEC,IAAI;IAAEM,SAAS;IAAEC;EAAc,CAAE,GAAGZ,WAAW;EACpE,IAAIC,OAAO,IAAI,CAAC,EAAE,MAAM,IAAIb,mBAAmB,CAAC;IAAEa;EAAO,CAAE,CAAC;EAE5D,IAAIG,EAAE,IAAI,CAACf,SAAS,CAACe,EAAE,CAAC,EAAE,MAAM,IAAIlB,mBAAmB,CAAC;IAAE+B,OAAO,EAAEb;EAAE,CAAE,CAAC;EACxE,IAAIC,IAAI,IAAI,CAAChB,SAAS,CAACgB,IAAI,CAAC,EAAE,MAAM,IAAInB,mBAAmB,CAAC;IAAE+B,OAAO,EAAEZ;EAAI,CAAE,CAAC;EAC9E,IAAIM,SAAS,IAAI,CAACtB,SAAS,CAACsB,SAAS,CAAC,EACpC,MAAM,IAAIzB,mBAAmB,CAAC;IAAE+B,OAAO,EAAEN;EAAS,CAAE,CAAC;EAEvD,IAAIA,SAAS,IAAI,CAACC,cAAc,EAAE;IAChC,MAAM,IAAIzB,SAAS,CACjB,+DAA+D,CAChE;;EAGH,IAAI,CAACwB,SAAS,IAAIC,cAAc,EAAE;IAChC,MAAM,IAAIzB,SAAS,CACjB,+DAA+D,CAChE;;AAEL"},"metadata":{},"sourceType":"module","externalDependencies":[]}