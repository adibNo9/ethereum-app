{"ast":null,"code":"import '../../types/chain.js';\nimport { hexToBigInt } from '../../utils/encoding/fromHex.js';\nimport { numberToHex } from '../../utils/encoding/toHex.js';\nimport { defineBlock } from '../../utils/formatters/block.js';\nimport { defineTransaction, formatTransaction } from '../../utils/formatters/transaction.js';\nimport { defineTransactionRequest } from '../../utils/formatters/transactionRequest.js';\nimport { isCIP42, isCIP64 } from './utils.js';\nexport const formattersCelo = {\n  block: /*#__PURE__*/defineBlock({\n    exclude: ['difficulty', 'gasLimit', 'mixHash', 'nonce', 'uncles'],\n    format(args) {\n      const transactions = args.transactions?.map(transaction => {\n        if (typeof transaction === 'string') return transaction;\n        return {\n          ...formatTransaction(transaction),\n          feeCurrency: transaction.feeCurrency,\n          ...(transaction.type !== '0x7b' ? {\n            gatewayFee: transaction.gatewayFee ? hexToBigInt(transaction.gatewayFee) : null,\n            gatewayFeeRecipient: transaction.gatewayFeeRecipient || null\n          } : {})\n        };\n      });\n      return {\n        randomness: args.randomness,\n        transactions\n      };\n    }\n  }),\n  transaction: /*#__PURE__*/defineTransaction({\n    format(args) {\n      const transaction = {\n        feeCurrency: args.feeCurrency\n      };\n      if (args.type === '0x7b') transaction.type = 'cip64';else {\n        if (args.type === '0x7c') transaction.type = 'cip42';\n        transaction.gatewayFee = args.gatewayFee ? hexToBigInt(args.gatewayFee) : null;\n        transaction.gatewayFeeRecipient = args.gatewayFeeRecipient;\n      }\n      return transaction;\n    }\n  }),\n  transactionRequest: /*#__PURE__*/defineTransactionRequest({\n    format(args) {\n      const request = {\n        feeCurrency: args.feeCurrency\n      };\n      if (isCIP64(args)) request.type = '0x7b';else {\n        if (isCIP42(args)) request.type = '0x7c';\n        request.gatewayFee = typeof args.gatewayFee !== 'undefined' ? numberToHex(args.gatewayFee) : undefined;\n        request.gatewayFeeRecipient = args.gatewayFeeRecipient;\n      }\n      return request;\n    }\n  })\n};","map":{"version":3,"names":["hexToBigInt","numberToHex","defineBlock","defineTransaction","formatTransaction","defineTransactionRequest","isCIP42","isCIP64","formattersCelo","block","exclude","format","args","transactions","map","transaction","feeCurrency","type","gatewayFee","gatewayFeeRecipient","randomness","transactionRequest","request","undefined"],"sources":["/home/adib-alpha/projects/ethereum-app/node_modules/viem/chains/celo/formatters.ts"],"sourcesContent":["import { type ChainFormatters } from '../../types/chain.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { RpcTransaction } from '../../types/rpc.js'\nimport { hexToBigInt } from '../../utils/encoding/fromHex.js'\nimport { numberToHex } from '../../utils/encoding/toHex.js'\nimport { defineBlock } from '../../utils/formatters/block.js'\nimport {\n  defineTransaction,\n  formatTransaction,\n} from '../../utils/formatters/transaction.js'\nimport { defineTransactionRequest } from '../../utils/formatters/transactionRequest.js'\nimport type {\n  CeloBlockOverrides,\n  CeloRpcTransaction,\n  CeloRpcTransactionRequest,\n  CeloTransaction,\n  CeloTransactionRequest,\n} from './types.js'\nimport { isCIP42, isCIP64 } from './utils.js'\n\nexport const formattersCelo = {\n  block: /*#__PURE__*/ defineBlock({\n    exclude: ['difficulty', 'gasLimit', 'mixHash', 'nonce', 'uncles'],\n    format(\n      args: CeloBlockOverrides & {\n        transactions: Hash[] | CeloRpcTransaction[]\n      },\n    ): CeloBlockOverrides & {\n      transactions: Hash[] | CeloTransaction[]\n    } {\n      const transactions = args.transactions?.map((transaction) => {\n        if (typeof transaction === 'string') return transaction\n        return {\n          ...formatTransaction(transaction as RpcTransaction),\n          feeCurrency: transaction.feeCurrency,\n\n          ...(transaction.type !== '0x7b'\n            ? {\n                gatewayFee: transaction.gatewayFee\n                  ? hexToBigInt(transaction.gatewayFee)\n                  : null,\n                gatewayFeeRecipient: transaction.gatewayFeeRecipient || null,\n              }\n            : {}),\n        }\n      }) as Hash[] | CeloTransaction[]\n      return {\n        randomness: args.randomness,\n        transactions,\n      }\n    },\n  }),\n  transaction: /*#__PURE__*/ defineTransaction({\n    format(args: CeloRpcTransaction): CeloTransaction {\n      const transaction = { feeCurrency: args.feeCurrency } as CeloTransaction\n\n      if (args.type === '0x7b') transaction.type = 'cip64'\n      else {\n        if (args.type === '0x7c') transaction.type = 'cip42'\n\n        transaction.gatewayFee = args.gatewayFee\n          ? hexToBigInt(args.gatewayFee)\n          : null\n        transaction.gatewayFeeRecipient = args.gatewayFeeRecipient\n      }\n\n      return transaction\n    },\n  }),\n\n  transactionRequest: /*#__PURE__*/ defineTransactionRequest({\n    format(args: CeloTransactionRequest): CeloRpcTransactionRequest {\n      const request = {\n        feeCurrency: args.feeCurrency,\n      } as CeloRpcTransactionRequest\n\n      if (isCIP64(args)) request.type = '0x7b'\n      else {\n        if (isCIP42(args)) request.type = '0x7c'\n\n        request.gatewayFee =\n          typeof args.gatewayFee !== 'undefined'\n            ? numberToHex(args.gatewayFee)\n            : undefined\n        request.gatewayFeeRecipient = args.gatewayFeeRecipient\n      }\n\n      return request\n    },\n  }),\n} as const satisfies ChainFormatters\n"],"mappings":"AAAA,OAAqC,sBAAsB;AAG3D,SAASA,WAAW,QAAQ,iCAAiC;AAC7D,SAASC,WAAW,QAAQ,+BAA+B;AAC3D,SAASC,WAAW,QAAQ,iCAAiC;AAC7D,SACEC,iBAAiB,EACjBC,iBAAiB,QACZ,uCAAuC;AAC9C,SAASC,wBAAwB,QAAQ,8CAA8C;AAQvF,SAASC,OAAO,EAAEC,OAAO,QAAQ,YAAY;AAE7C,OAAO,MAAMC,cAAc,GAAG;EAC5BC,KAAK,EAAE,aAAcP,WAAW,CAAC;IAC/BQ,OAAO,EAAE,CAAC,YAAY,EAAE,UAAU,EAAE,SAAS,EAAE,OAAO,EAAE,QAAQ,CAAC;IACjEC,MAAMA,CACJC,IAEC;MAID,MAAMC,YAAY,GAAGD,IAAI,CAACC,YAAY,EAAEC,GAAG,CAAEC,WAAW,IAAI;QAC1D,IAAI,OAAOA,WAAW,KAAK,QAAQ,EAAE,OAAOA,WAAW;QACvD,OAAO;UACL,GAAGX,iBAAiB,CAACW,WAA6B,CAAC;UACnDC,WAAW,EAAED,WAAW,CAACC,WAAW;UAEpC,IAAID,WAAW,CAACE,IAAI,KAAK,MAAM,GAC3B;YACEC,UAAU,EAAEH,WAAW,CAACG,UAAU,GAC9BlB,WAAW,CAACe,WAAW,CAACG,UAAU,CAAC,GACnC,IAAI;YACRC,mBAAmB,EAAEJ,WAAW,CAACI,mBAAmB,IAAI;WACzD,GACD,EAAE;SACP;MACH,CAAC,CAA+B;MAChC,OAAO;QACLC,UAAU,EAAER,IAAI,CAACQ,UAAU;QAC3BP;OACD;IACH;GACD,CAAC;EACFE,WAAW,EAAE,aAAcZ,iBAAiB,CAAC;IAC3CQ,MAAMA,CAACC,IAAwB;MAC7B,MAAMG,WAAW,GAAG;QAAEC,WAAW,EAAEJ,IAAI,CAACI;MAAW,CAAqB;MAExE,IAAIJ,IAAI,CAACK,IAAI,KAAK,MAAM,EAAEF,WAAW,CAACE,IAAI,GAAG,OAAO,MAC/C;QACH,IAAIL,IAAI,CAACK,IAAI,KAAK,MAAM,EAAEF,WAAW,CAACE,IAAI,GAAG,OAAO;QAEpDF,WAAW,CAACG,UAAU,GAAGN,IAAI,CAACM,UAAU,GACpClB,WAAW,CAACY,IAAI,CAACM,UAAU,CAAC,GAC5B,IAAI;QACRH,WAAW,CAACI,mBAAmB,GAAGP,IAAI,CAACO,mBAAmB;;MAG5D,OAAOJ,WAAW;IACpB;GACD,CAAC;EAEFM,kBAAkB,EAAE,aAAchB,wBAAwB,CAAC;IACzDM,MAAMA,CAACC,IAA4B;MACjC,MAAMU,OAAO,GAAG;QACdN,WAAW,EAAEJ,IAAI,CAACI;OACU;MAE9B,IAAIT,OAAO,CAACK,IAAI,CAAC,EAAEU,OAAO,CAACL,IAAI,GAAG,MAAM,MACnC;QACH,IAAIX,OAAO,CAACM,IAAI,CAAC,EAAEU,OAAO,CAACL,IAAI,GAAG,MAAM;QAExCK,OAAO,CAACJ,UAAU,GAChB,OAAON,IAAI,CAACM,UAAU,KAAK,WAAW,GAClCjB,WAAW,CAACW,IAAI,CAACM,UAAU,CAAC,GAC5BK,SAAS;QACfD,OAAO,CAACH,mBAAmB,GAAGP,IAAI,CAACO,mBAAmB;;MAGxD,OAAOG,OAAO;IAChB;GACD;CACiC"},"metadata":{},"sourceType":"module","externalDependencies":[]}