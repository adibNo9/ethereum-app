{"ast":null,"code":"var _jsxFileName = \"/home/adib-alpha/projects/ethereum-app/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { useAccount, useConnect, useContractWrite, useDisconnect, usePrepareContractWrite, useWaitForTransaction } from \"wagmi\";\nimport { connector } from \"./\";\nimport { useDebounce } from \"./hooks/useDebounce\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const account = useAccount({\n    onConnect({\n      address,\n      connector,\n      isReconnected\n    }) {\n      console.log(\"Connected\", {\n        address,\n        connector,\n        isReconnected\n      });\n    }\n  });\n  const {\n    disconnect\n  } = useDisconnect();\n  const {\n    connect,\n    isLoading,\n    error\n  } = useConnect({\n    connector: connector\n  });\n  const [tokenId, setTokenId] = useState(\"\");\n  const debouncedTokenId = useDebounce(tokenId);\n  const {\n    config,\n    error: prepareError,\n    isError: isPrepareError\n  } = usePrepareContractWrite({\n    address: \"0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2\",\n    abi: [{\n      name: \"mint\",\n      type: \"function\",\n      stateMutability: \"nonpayable\",\n      inputs: [{\n        internalType: \"uint32\",\n        name: \"tokenId\",\n        type: \"uint32\"\n      }],\n      outputs: []\n    }],\n    functionName: \"mint\",\n    args: [parseInt(debouncedTokenId)],\n    enabled: Boolean(debouncedTokenId)\n  });\n  const {\n    data,\n    error: errorContract,\n    isError,\n    write\n  } = useContractWrite(config);\n  const {\n    isLoading: isLoadingTransaction,\n    isSuccess\n  } = useWaitForTransaction({\n    hash: data === null || data === void 0 ? void 0 : data.hash\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: account.isConnected ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Connected Wallet: \", account.address]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: disconnect,\n        children: \"Disconnect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: isLoading,\n        onClick: connect,\n        children: isLoading ? \"Connecting...\" : \"Connect metamask\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)\n    }, void 0, false)\n  }, void 0, false);\n}\n_s(App, \"vyQa8jyZhJdIlne1OxX8EDy+O0I=\", false, function () {\n  return [useAccount, useDisconnect, useConnect, useDebounce, usePrepareContractWrite, useContractWrite, useWaitForTransaction];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useAccount","useConnect","useContractWrite","useDisconnect","usePrepareContractWrite","useWaitForTransaction","connector","useDebounce","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","account","onConnect","address","isReconnected","console","log","disconnect","connect","isLoading","error","tokenId","setTokenId","debouncedTokenId","config","prepareError","isError","isPrepareError","abi","name","type","stateMutability","inputs","internalType","outputs","functionName","args","parseInt","enabled","Boolean","data","errorContract","write","isLoadingTransaction","isSuccess","hash","children","isConnected","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["/home/adib-alpha/projects/ethereum-app/src/App.js"],"sourcesContent":["import { useState } from \"react\";\n\nimport {\n  useAccount,\n  useConnect,\n  useContractWrite,\n  useDisconnect,\n  usePrepareContractWrite,\n  useWaitForTransaction,\n} from \"wagmi\";\n\nimport { connector } from \"./\";\nimport { useDebounce } from \"./hooks/useDebounce\";\n\nfunction App() {\n  const account = useAccount({\n    onConnect({ address, connector, isReconnected }) {\n      console.log(\"Connected\", { address, connector, isReconnected });\n    },\n  });\n  const { disconnect } = useDisconnect();\n  const { connect, isLoading, error } = useConnect({\n    connector: connector,\n  });\n\n  const [tokenId, setTokenId] = useState(\"\");\n  const debouncedTokenId = useDebounce(tokenId);\n\n  const {\n    config,\n    error: prepareError,\n    isError: isPrepareError,\n  } = usePrepareContractWrite({\n    address: \"0xFBA3912Ca04dd458c843e2EE08967fC04f3579c2\",\n    abi: [\n      {\n        name: \"mint\",\n        type: \"function\",\n        stateMutability: \"nonpayable\",\n        inputs: [{ internalType: \"uint32\", name: \"tokenId\", type: \"uint32\" }],\n        outputs: [],\n      },\n    ],\n    functionName: \"mint\",\n    args: [parseInt(debouncedTokenId)],\n    enabled: Boolean(debouncedTokenId),\n  });\n  const {\n    data,\n    error: errorContract,\n    isError,\n    write,\n  } = useContractWrite(config);\n\n  const { isLoading: isLoadingTransaction, isSuccess } = useWaitForTransaction({\n    hash: data?.hash,\n  });\n\n  return (\n    <>\n      {account.isConnected ? (\n        <>\n          <h2>Connected Wallet: {account.address}</h2>\n          <button onClick={disconnect}>Disconnect</button>\n        </>\n      ) : (\n        <>\n          <button disabled={isLoading} onClick={connect}>\n            {isLoading ? \"Connecting...\" : \"Connect metamask\"}\n          </button>\n        </>\n      )}\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}